name: Lsp-Downloader
on:
  workflow_call:
    inputs:
      directory:
        description: 'Directory you want to store the lsp tar.gz file after download'
        required: true
        type: string
      lspPackageName:
        description: 'NPM LSP package name to be downloaded'
        required: true
        type: string

jobs:
  get-lsp:
    runs-on: ubuntu-latest
    outputs:
      artifact: ${{ steps.get-lsp.outputs.artifact }}
      package-name: ${{ steps.get-lsp.outputs.package-name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: latest
     
      - name: Get LSP
        id: get-lsp
        run: |
          mkdir -p artifacts
          ARTIFACT_PATH=artifacts
          packageName="${{ inputs.lspPackageName }}"
          [ "${packageName:0:1}" == "@" ] && packageName=$(echo "${packageName}" | grep -oP "(?<=/)[^/]+")
          npm install -g ${{ inputs.lspPackageName }} --prefix $ARTIFACT_PATH/$packageName
          tar czvf $packageName.tgz -C $ARTIFACT_PATH/ $packageName
          echo "artifact=$packageName" >> $GITHUB_OUTPUT
          echo "package-name=$packageName.tgz" >> $GITHUB_OUTPUT
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get-lsp.outputs.artifact }}
          path: ${{ steps.get-lsp.outputs.package-name }}
          retention-days: 1
  
  commit-and-push:
    runs-on: ubuntu-latest
    needs: get-lsp
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Update Repo From Remote
        run: |
          git fetch origin main
          git rebase origin/main

      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.get-lsp.outputs.artifact }}

      - name: Move artifact to lsp dir
        run: |
          ls -R
          mkdir -p ${{ inputs.directory }}
          mv -f ${{ needs.get-lsp.outputs.package-name }} ${{ inputs.directory }}
        
      - name: Check for changes
        id: git-check
        run: |
          if [ -z "$(git status --porcelain)" ]; then
            echo "needs-update=false" >> $GITHUB_OUTPUT
          else
            echo "needs-update=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push
        if: steps.git-check.outputs.needs-update == 'true'
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          git add ${{ inputs.directory }}/*
          git commit -m "Updated ${{ inputs.lspPackageName }}"
          git push origin main
